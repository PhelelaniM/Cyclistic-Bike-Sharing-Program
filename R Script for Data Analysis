getwd()
install.packages("tidyverse")
library(tidyverse)
library(ggplot2)
library(lubridate)

setwd("\\Users\\phelelani\\Desktop\\to mve 2\\Cap Data")

#Import the CSV's into the variables / data frames
q4_2019 <- read_csv("Divvy_Trips_2019_Q4.csv")
q3_2019 <- read_csv("Divvy_Trips_2019_Q3.csv")
q2_2019 <- read_csv("Divvy_Trips_2019_Q2.csv")
q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv")

#make sure all the columns of each table / data frame are aligned i.e., same structure

colnames(q4_2019)
colnames(q3_2019)
colnames(q2_2019)
colnames(q1_2020)

#rename all of the csv columns to match up with the "q1_2020" table.

q2_2019 <- rename(q2_2019,ride_id = "01 - Rental Details Rental ID",,rideable_type = "01 - Rental Details Bike ID",
                  started_at = "01 - Rental Details Local Start Time",
                  ended_at = "01 - Rental Details Local End Time",
                  start_station_name = "03 - Rental Start Station Name",
                  start_station_id = "03 - Rental Start Station ID",
                  end_station_name = "02 - Rental End Station Name",
                  end_station_id = "02 - Rental End Station ID",
                  member_casual = "User Type")

(q4_2019 <- rename(q4_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid 
                   ,started_at = start_time  
                   ,ended_at = end_time  
                   ,start_station_name = from_station_name 
                   ,start_station_id = from_station_id 
                   ,end_station_name = to_station_name 
                   ,end_station_id = to_station_id 
                   ,member_casual = usertype))

(q3_2019 <- rename(q3_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid 
                   ,started_at = start_time  
                   ,ended_at = end_time  
                   ,start_station_name = from_station_name 
                   ,start_station_id = from_station_id 
                   ,end_station_name = to_station_name 
                   ,end_station_id = to_station_id 
                   ,member_casual = usertype))

#we are checking to see if the columns are consistent with each other.
str(q3_2019)
str(q2_2019)
str(q1_2020)
str(q4_2019)

#We are converting the ride_id, rideable_type columns into characters so they can stack up correctly.

q4_2019 <-  mutate(q4_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
q3_2019 <-  mutate(q3_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
q2_2019 <-  mutate(q2_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 

# Stack individual quarter's data frames into one big data frame
all_trips <- bind_rows(q2_2019, q3_2019, q4_2019, q1_2020)

#The minus at the start of the c suggests that eclude everything that is written in the brackets
all_trips <- all_trips %>%  
  select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender, "01 - Rental Details Duration In Seconds Uncapped", "05 - Member Details Member Birthday Year", "Member Gender", "tripduration"))

# Inspect the new table that has been created

colnames(all_trips)  #List of column names

nrow(all_trips)  #How many rows are in data frame?
dim(all_trips)  #Dimensions of the data frame?

head(all_trips)  #See the first 6 rows of data frame.  Also tail(all_trips)
str(all_trips)  #See list of columns and data types (numeric, character, etc)
summary(all_trips)  #Statistical summary of data. Mainly for numerics

#In the member_casual columns replace subscriber with member and customer with member - rename only renames columns 
all_trips <-  all_trips %>% 
  mutate(member_casual = recode(member_casual
                                ,"Subscriber" = "member"
                                ,"Customer" = "casual"))
#This function is like a group by or case sum (SQL) that counts each record according to what it is..
table(all_trips$member_casual)

all_trips$date <- as.Date(all_trips$started_at) #The default format is yyyy-mm-dd
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")

# Add a "ride_length" calculation to all_trips (in seconds)

all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)

# Convert "ride_length" from Factor to numeric so we can run calculations on the data
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)

# Remove "bad" data
# The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or ride_length was negative
# We will create a new version of the dataframe (v2) since data is being removed
# https://www.datasciencemadesimple.com/delete-or-drop-rows-in-r-with-conditions-2/
all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]


# Descriptive analysis on ride_length (all figures in seconds)
mean(all_trips_v2$ride_length) #straight average (total ride length / rides)
median(all_trips_v2$ride_length) #midpoint number in the ascending array of ride lengths
max(all_trips_v2$ride_length) #longest ride
min(all_trips_v2$ride_length) #shortest ride

# Compare members and casual users by their ride lengths
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)

# See the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)

# Notice that the days of the week are out of order. Let's fix that.
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

# Now, let's run the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)

# analyze ridership data by type and weekday
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>%  #creates weekday field using wday()
  group_by(member_casual, weekday) %>%  #groups by usertype and weekday
  summarise(number_of_rides = n()							#calculates the number of rides and average duration 
            ,average_duration = mean(ride_length)) %>% 		# calculates the average duration
  arrange(member_casual, weekday)								# sorts

# Let's visualize the number of rides by rider type
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")

# Let's create a visualization for average duration
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge")

counts <- aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = sum)
write.csv(counts, file = '/Users/phelelani.FERNRIDGE/Desktop/to mve 2/Cap Data/avg_ride_length1.csv')

counts_2 <- aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
write.csv(counts_2, file = '/Users/phelelani.FERNRIDGE/Desktop/to mve 2/Cap Data/avg_ride_length2.csv')

counts_3 <- aggregate(all_trips_v2$ride_length ~all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
write.csv(counts_3, file = '/Users/phelelani/Desktop/to mve 2/Cap Data/avg_ride_length3_2.csv')

counts_4 <- aggregate(all_trips_v2$ride_length ~ all_trips_v2$month + all_trips_v2$day_of_week, FUN = sum)
write.csv(counts_4, file = '/Users/phelelani/Desktop/to mve 2/Cap Data/avg_ride_length4.csv')

counts_5 <- aggregate(all_trips_v2$ride_id ~ all_trips_v2$start_station_name, FUN = length)
write.csv(counts_5, file = '/Users/phelelani/Desktop/to mve 2/Cap Data/avg_ride_length5.csv')

counts_6 <- aggregate(all_trips_v2$ride_id ~ all_trips_v2$member_casual+all_trips_v2$start_station_name, FUN = length)
write.csv(counts_6, file = '/Users/phelelani/Desktop/to mve 2/Cap Data/avg_ride_length6.csv')

counts_8 <- aggregate(all_trips_v2$ride_length ~ all_trips_v2$month + all_trips_v2$day_of_week+all_trips_v2$member_casual, FUN = length)
write.csv(counts_8, file = '/Users/phelelani/Desktop/to mve 2/Cap Data/avg_ride_length8.csv')
